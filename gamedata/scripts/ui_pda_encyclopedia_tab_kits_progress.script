local UpdateDescr_old = ui_pda_encyclopedia_tab.UpdateDescr

local color_yellow = utils_xml.get_color("pda_yellow")
local color_gray = utils_xml.get_color("ui_gray_1")
local color_green = utils_xml.get_color("pda_green")
local color_red = utils_xml.get_color("d_red")

local new_line = function(str)
	return str .. color_gray .. " \\n"
end

local data = {
	["itm_basickit"] = false,
	["itm_advancedkit"] = false,
	["itm_expertkit"] = false,
	["itm_drugkit"] = false,
	["itm_ammokit"] = false,
}

local translation_strings = {
	["itm_basickit"] = "st_itm_basickit_name",
	["itm_advancedkit"] = "st_itm_advancedkit_name",
	["itm_expertkit"] = "st_itm_expertkit_name",
	["itm_drugkit"] = "st_itm_drugkit",
	["itm_ammokit"] = "st_itm_ammokit",
}

ui_pda_encyclopedia_tab.UpdateDescr = function(section, str)
	str = UpdateDescr_old(section, str)
	if section == "encyclopedia__notes_kits_progress" then
		local kits_order = {
			"itm_basickit",
			"itm_advancedkit",
			"itm_expertkit",
			"itm_drugkit",
			"itm_ammokit",
		}

		for _, key in ipairs(kits_order) do
			local found = data[key]
			local tools_name = game.translate_string(translation_strings[key])
			if found then
				str = new_line(str) .. string.format(game.translate_string("pda_encyclopedia_kits_progress_tool_found"), color_green, tools_name)
			else
				str = new_line(str) .. string.format(game.translate_string("pda_encyclopedia_kits_progress_tool_not_found"), color_red, tools_name)
			end
		end

		str = new_line(str)

		local current = (load_var(db.actor, "toolkit_reward_count") or 0) - 1
		local max = treasure_manager.stash_rare.task_num
		local left = max - current
		if left <= 0 then
			str = new_line(str) .. string.format(game.translate_string("pda_encyclopedia_kits_progress_next_rare"), color_green, color_gray, color_yellow, color_gray)
		else
			if left == 1 then
				str = new_line(str) .. string.format(game.translate_string("pda_encyclopedia_kits_progress_one_left"), color_yellow, left, color_gray, color_yellow, color_gray)
			else
				str = new_line(str) .. string.format(game.translate_string("pda_encyclopedia_kits_progress_in_progress"), color_yellow, left, color_gray, color_yellow, color_gray)
			end
		end
	end
	return str
end

local UpdateColor_old = ui_pda_encyclopedia_tab.UpdateColor
ui_pda_encyclopedia_tab.UpdateColor = function(section, color)
	if section == "encyclopedia__notes_kits_progress" then
		return utils_xml.get_color("pda_white",true)
	end
	return UpdateColor_old(section, color)
end

local treasure_manager_try_spawn_treasure_old = treasure_manager.try_spawn_treasure
function treasure_manager.try_spawn_treasure(box)
	local id = box:id()

	if not (treasure_manager.caches[id]) then
		return
	end

	if not (type(treasure_manager.caches[id]) == "string") then
		return
	end

	local spawned_item = str_explode(treasure_manager.caches[id],",")
	for i, section in ipairs(spawned_item) do
		if data[section] == false then
			data[section] = true
		end
	end
	treasure_manager_try_spawn_treasure_old(box)
end

function save_state(m_data)
	m_data.kits_progress = data
end

function load_state(m_data)
	local t = m_data.kits_progress or {}
	for tools, v in pairs(t) do
		data[tools] = v
	end
end

function on_game_start()
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("save_state", save_state)
end